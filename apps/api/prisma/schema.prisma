// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
  USER
  MODERATOR // moderator
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  PENDING
  SUSPENDED
  DELETED
}

model User {
  id             String      @id @default(uuid())
  name           String?
  email          String      @unique
  username       String?     @unique
  password       String?
  roles          Role[]      @default([CUSTOMER])
  avatar         String?
  status         UserStatus  @default(ACTIVE)
  isEmailVerified Boolean     @default(false)
  provider       AuthProvider @default(CREDENTIAL)
  providerId     String?      // for Google/GitHub ID
  resetToken     String?
  loginHistories LoginHistory[]
  orders         Order[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  @@index([email,status,username,createdAt])
}

enum AuthProvider {
  GOOGLE
  GITHUB
  CREDENTIAL
}

enum LoginHistoryStatus {
  SUCCESS
  FAILED
  LOCKED
}

model LoginHistory {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  attempt   LoginHistoryStatus @default(SUCCESS)
  ip        String?
  country   String?
  userAgent String?
  createdAt DateTime @default(now())
  @@index([userId,createdAt])
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DELETED
  PENDING
}

enum BillingCycle {
  MONTHLY
  ANNUALLY
  LIFETIME
  ONE_TIME
}

enum ProductGrading {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

model Product {
  id          String   @id @default(uuid())
  name        String
  type        ProductType
  quantity    Int?      @default(1)
  grade       ProductGrading  @default(FREE)
  description String?
  price       Float    @default(0)
  discount    Float    @default(0)
  config      Json?    
  isActive    Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  billingCycle BillingCycle @default(MONTHLY)
  status      ProductStatus   @default(ACTIVE)
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ProductType {
  DOMAIN
  HOSTING
  SSL
  EMAIL
  VPS
  CLOUD
  DEDICATED
  SMS
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
  CANCELLED
  REFUNDED
  ACTIVE
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  product     Product     @relation(fields: [productId], references: [id],onDelete: Cascade)
  productId   String
  domainName  String?     
  status      OrderStatus @default(PENDING)
  currency    String?
  transId     String?
  tax         Float? @default(0)
  discount    Float?  @default(0)
  amount      Float
  subtotal    Float?  @default(0)
  metadata    Json? 
  paidAt      DateTime?
  expiresAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  payments    Payment[]
  @@index([userId, productId,createdAt])
}


enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  STRIPE
  SSLCOMMERZ
  PAYPAL
}



model Payment {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  method    PaymentMethod @default(SSLCOMMERZ) 
  status    PaymentStatus @default(PENDING)   
  currency  String?       @default("BDT")
  metadata  Json?
  transId   String?
  amount    Float
  paidAt    DateTime @default(now())
  @@index([orderId,paidAt])
}

model Setting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     Json?
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CouponStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

model Coupon {
  id        String   @id @default(uuid())
  code      String   @unique
  discount  Float
  status    CouponStatus   @default(ACTIVE)
  expiesAt  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}